#!/usr/bin/env python
from __future__ import print_function
from future.standard_library import install_aliases
install_aliases()

from urllib.parse import urlparse, urlencode
from urllib.request import urlopen, Request
from urllib.error import HTTPError

import json
import os
import requests
import codecs

from datetime import datetime

from flask import Flask
from flask import request
from flask import make_response

app = Flask(__name__)

@app.route('/webhook', methods=['POST'])
def webhook():
    req = request.get_json(silent=True, force=True)
    print("Request:")
    print(json.dumps(req, indent=4))

    res = getService(req)
    res = json.dumps(res, indent=4)

    r = make_response(res)
    r.headers['Content-Type'] = 'application/json'
    return r

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
def getService(req):
    result = req.get("result")
    action = result.get("action")
    if action=="weather":
        return serviceWeather(result)
    elif action=="translate.text":
        return serviceTranslate(result)
    elif action=="dar.wiki":
        return serviceWiki(result)

# –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Wikipedia
def makeWikiRequest(text):
    baseUrl = "https://ru.wikipedia.org/w/api.php"
    params = "?action=query&prop=extracts&exintro&indexpageids=true&format=json&generator=search&gsrlimit=1&exsentences=6&explaintext&gsrsearch=" + text
    return baseUrl + params

# –£–º–µ–Ω—å—à–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ —Ç–æ—á–∫–∏
def beautifyWikiText(text, textLength):
    total = 0
    brackets = 0
    str = ""
    for letter in text:
        str = str + letter
        total +=1
        if letter=='(':
            brackets +=1
        if letter==')':
            brackets -=1
        if letter=='.'and brackets==0 and total>textLength:
          return str
    return str

#-----–°–µ—Ä–≤–∏—Å —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏—è Wikipedia-----
def serviceWiki(result):
    parameters = result.get("parameters")
    req = makeWikiRequest(parameters.get("text"))

    try:
        res = requests.get(req)
        data = res.json()
        speech = data['query']['pages'].values()[0]['extract']
        speech = beautifyWikiText(speech, 150)

        # working url address
        #"https://ru.wikipedia.org/wiki/" + parameters.get("text")
    except:
        speech = u"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å üòï"

    return returnJsonFunction(speech, "wiki")


# –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ü–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
def makeTranslateRequest(q, langCode):

    # Google translate key
    key = 'AIzaSyAhP5cBWEpmUhIOavwZ2GFlMTFdhJrwxAQ'
    url = "https://translation.googleapis.com/language/translate/v2?"
    params = "q="+q+"&format=text"+"&target="+langCode+"&key="+key

    return url+params


#-----–°–µ—Ä–≤–∏—Å Google translate-----
def serviceTranslate(result):

    parameters = result.get("parameters")
    q = parameters.get("text")
    req = makeTranslateRequest(q, langCode)
    res = requests.get(req)
    data = res.json()
    speech = data['data']['translations'][0]['translatedText']

    return returnJsonFunction(speech, "translate")


#--------------–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è------------------------------------------------
def getWeatherSpeechTodayWunderground(s_city, latitude, longitude):

    url = "http://api.wunderground.com/api/d6def0217fa138e1/hourly/lang:RU/q/"+str(latitude)+ "," +str(longitude) + ".json"
    res = requests.get(url)

    data = res.json()

    description = data["response"]["termsofService"]
    temp = data["hourly_forecast"][0]["FCTTIME"]["pretty"]

    return u"–°–µ–≥–æ–¥–Ω—è –≤ "+s_city+": "+description+ u", —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ "+temp + u" ¬∞C "


#--------------–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è------------------------------------------------
def getWeatherSpeechToday(s_city, latitude, longitude):

    appid = "01e9d712127bbffa4c9e669f39d3a127"
    res = requests.get("http://api.openweathermap.org/data/2.5/find",
        params={'lat': latitude, 'lon': longitude, 'type': 'accurate', 'lang': 'ru', 'units': 'metric', 'APPID': appid})
    data = res.json()
    temp = str(int(round(data['list'][0]['main']['temp'])))
    description = data['list'][0]['weather'][0]['description']
    description = localize(description, temp)

    return u"–°–µ–≥–æ–¥–Ω—è –≤ "+s_city+": "+description+ u", —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ "+temp + u" ¬∞C "


#-------------–ü–æ–≥–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ –¥–Ω–∏----------------------------------------------
def getWeatherSpeech(s_city, latitude, longitude, cnt, d1 ,d2):

    appid = "01e9d712127bbffa4c9e669f39d3a127"
    res = requests.get("http://api.openweathermap.org/data/2.5/forecast/daily",
            params={'lat': latitude, 'lon': longitude, 'type': 'accurate', 'lang': 'ru', 'units': 'metric', 'APPID': appid, 'cnt': cnt+1})
    data = res.json()
    temp = str(int(round(data['list'][cnt]['temp']['day'])))
    description = data['list'][cnt]['weather'][0]['description']
    description = localize(description, temp)

    s_day = localizeDay(d1.strftime("%a"), d1.strftime("%d"))

    return u"–ü–æ–≥–æ–¥–∞ –Ω–∞ " + s_day +  u" –≤ " +s_city+": "+description+ u", —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ "+temp + u" ¬∞C "


#-------------–î–æ—Å—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å Google response---------------------------
def getWeatherCityCoordinates(s_city):

    s_city = s_city.split(" ")
    url = "https://maps.googleapis.com/maps/api/geocode/json"
    params = {'sensor': 'false', 'language': 'ru', 'address': s_city}
    res = requests.get(url, params=params)
    results = res.json()
    response_status = results['status']

    if response_status!="OK":
        return "ERROR", "1", "1", "No city"

    latitude = results["results"][0]["geometry"]["location"]["lat"]
    longitude = results["results"][0]["geometry"]["location"]["lng"]

    locality_type = results["results"][0]["address_components"][0]["types"][0]
    address_components = results["results"][0]["address_components"]

    isKZ = False
    i = 0
    for obj in address_components:
        if results["results"][0]["address_components"][i]["short_name"] == "KZ":
            isKZ = True
        i = i+1
    if locality_type != "locality" or isKZ==False:
        return "OK", latitude, longitude, results["results"][0]["formatted_address"]
    else:
        return "OK", latitude, longitude, results["results"][0]["address_components"][0]["short_name"]

    return "ERROR", "1", "1", u"–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"


#------NEW WEATHER SERVICE VIA GOOGLE MAPS AND OPENWEATHERMAP------------------
def serviceWeather(result):

    parameters = result.get("parameters")
    s_city = parameters.get("geo-city")
    s_day = str(parameters.get("date"))
    isWeather = parameters.get("weather")

    if isWeather=="":
        speech = u"–Ø –ø–æ–∫–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –Ω–æ —è —É—á—É—Å—å"
        return returnJsonFunction(speech, "weather")

    # *******–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã********
    try:
        status, latitude, longitude, s_city = getWeatherCityCoordinates(s_city)

        if status == "ERROR":
            speech = u"–ö–∞–∂–µ—Ç—Å—è —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..."
            return returnJsonFunction(speech, "weather")

        if s_day == "" or len(s_day)<10:
            speech = getWeatherSpeechToday(s_city, latitude, longitude)
        else:
            d1 = datetime.strptime(s_day, "%Y-%m-%d").date()
            d2 = datetime.today().date()
            cnt = (d1-d2).days

            if cnt>=0 and cnt<16:
                speech = getWeatherSpeech(s_city, latitude, longitude, cnt, d1, d2)
            elif cnt>=16:
                speech = u"–¢–∞–∫ –¥–∞–ª–µ–∫–æ —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å ü§î"
            else:
                speech = u"–ü—Ä–æ—Å—Ç–∏, –ø—Ä–æ—à–ª–æ–µ –≤–Ω–µ –º–æ–µ–π –ø–æ–≥–æ–¥–Ω–æ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏..."

    except Exception as E:
        print("Error in weather webhook: " + str(E))
        pass

    return returnJsonFunction(speech, "weather")
#-------------------------------------------------------------------------------

# –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ JSON
def returnJsonFunction(speech, source):
    return {
        "speech": speech,
        "displayText": speech,
        "source": source,
        "messages": [
            {
            "type": 0,
            "speech": speech
            },
        {
        "type": 4,
        "payload": {
            "chatControl": {
                "chatButtons": {
                    "buttons": [
                      {
                        "title": "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
                        "command": "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
                      },
                      {
                        "title": "üëç",
                        "command": "üëç"
                      },
                      {
                        "title": "üëé",
                        "command": "üëé"
                      }
                ]
            }
        }
        }
        }
        ]
    }

#--------------- –∫–æ—Å—Ç—ã–ª—å----------—Å–ø–∞—Å–∏–±–æ OpenWeatherMap
def localize(desc, temp):
    if (temp>0) and (desc==u"–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥–æ–ø–∞–¥" or desc==u"—Å–Ω–µ–≥–æ–ø–∞–¥"):
        return u"–≤–æ–∑–º–æ–∂–Ω—ã –æ—Å–∞–¥–∫–∏"
    if desc=="shower sleet":
        return u"—Å–Ω–µ–≥–æ–ø–∞–¥"
    return desc

def localizeDay(day_of_week, day):
    day = str(int(day))
    if day=="3" or day=="23":
        day = day + u"-–µ"
    else:
        day = day + u"-–æ–µ"
    if day_of_week=="Mon" or day_of_week==0:
        return u"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, " + day
    elif day_of_week=="Tue" or day_of_week==1:
        return u"–≤—Ç–æ—Ä–Ω–∏–∫, "  + day
    elif day_of_week=="Wed" or day_of_week==2:
        return u"—Å—Ä–µ–¥—É, "  + day
    elif day_of_week=="Thu" or day_of_week==3:
        return u"—á–µ—Ç–≤–µ—Ä–≥, "  + day
    elif day_of_week=="Fri" or day_of_week==4:
        return u"–ø—è—Ç–Ω–∏—Ü—É, "  + day
    elif day_of_week=="Sat" or day_of_week==5:
        return u"—Å—É–±–±–æ—Ç—É, "  + day
    elif day_of_week=="Sun" or day_of_week==6:
        return u"–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, " + day
    return u"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –¥–Ω—è"


if __name__ == '__main__':
    port = int(os.getenv('PORT', 5000))

    print("Starting app on port %d" % port)

    app.run(debug=False, port=port, host='0.0.0.0')
